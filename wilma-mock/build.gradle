/*==========================================================================
Copyright 2015 EPAM Systems

This file is part of Wilma.

Wilma is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Wilma is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Wilma.  If not, see <http://www.gnu.org/licenses/>.
===========================================================================*/

ext.componentDescription = "Wilma-Mock"

apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: "sonar-runner"
apply from: '../common.gradle'

mainClassName = 'com.epam.wilma.mock.client.WilmaMock'

jar {
    manifest.attributes( 'provider': 'gradle')
    manifest.attributes( 'Main-Class': mainClassName)
    manifest.attributes( 'Implementation-Title': "$componentDescription - V$version")
    archiveName = "$componentName-$version"+'.jar'
} 

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.0.12'
    compile group: 'commons-httpclient', name: 'commons-httpclient', version:'3.1'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    compile group: 'commons-validator', name: 'commons-validator', version:'1.4.1'
    compile group: 'org.json', name: 'json', version:'20141113'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile group: 'org.testng', name: 'testng', version:'6.8.5'
}

test.useTestNG()

configurations {
    jacoco {
    }
}

dependencies {
    jacoco 'org.jacoco:org.jacoco.ant:0.6.2.201302030002'
}

task jacocoReport(type: JacocoReport) {
        dependsOn = tasks.withType(Test)
        additionalSourceDirs = files(project.sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(project.sourceSets.main.output)
        executionData = files(project.jacocoTestReport.executionData)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
            html.destination "build/reports/jacoco"
        }
        onlyIf = {
            true
        }
        doFirst {
            executionData = files(executionData.findAll {
                it.exists()
            })
        }
}


task copyJarToDistributions (type: Copy) {
    dependsOn(sourceZip)
    from("$buildDir/libs/")
    into("$buildDir/distributions")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceZip
            pom.withXml {
                asNode().appendNode('description', 'Wilma - Mock Service Library')
            }
        }
    }
}

task createPom << {
    pom {
    }.writeTo("$buildDir/distributions/$componentName-${version}.pom")
}
createPom.dependsOn(copyJarToDistributions)

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${myLocalRepository}")
        }
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "${sonar_host_url}"
        property "sonar.jdbc.url", "${sonar_jdbc_url}"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "${sonar_jdbc_username}"
        property "sonar.jdbc.password", "${sonar_jdbc_password}"
    }
}

task docs(type: Javadoc) {
    destinationDir = file("$buildDir/docs/all")
    options.memberLevel = JavadocMemberLevel.PRIVATE
    source += files(sourceSets.main.java)
    classpath += files(sourceSets.main.compileClasspath)
}
